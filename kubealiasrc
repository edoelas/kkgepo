alias python='python3'
alias pip='pip3'

export KUBECONFIG=$(find ~/.kube -type f -name 'config_*' | tr '\n' ':')

if [ -n "$BASH_VERSION" ]; then # BASH
    
    preexec() {
        if [[ $1 == kk* ]]; then

            local rest_elements=${1#*' '};  [[ "$1" == *" "* ]] || rest_elements=""; # Extract the trailing commands
            local command=${1:2} # Delete the first two characters 'kk'
            command=${command%% *} # Delete trailing commands

            eval $(python ~/kkgepo/kubealias.py $command) ${rest_elements} ;
            return 1
        fi
    }
    trap 'preexec $BASH_COMMAND' DEBUG # alternativa a bash-preexec
    shopt -s extdebug # avoid printing command not found

elif [ -n "$ZSH_VERSION" ]; then # ZSH

    my-accept-line () { # funcion encargada de procesar el comando antes de ejecutarlo
        if [[ "$BUFFER" == "kk"* ]]; then

            local rest_elements=${BUFFER#*' '};  [[ "$BUFFER" == *" "* ]] || rest_elements=""; # Extract the trailing commands
            local command=${BUFFER:2} # Delete the first two characters 'kk'
            command=${command%% *} # Delete trailing commands

            case $command in
            "co")
                BUFFER="ksetco";;
            "ns")
                BUFFER="ksetns";;
            *)
                BUFFER="$(python ~/kkgepo/kubealias.py $command) ${rest_elements}";;
            esac
        fi

        zle .accept-line # Check if line is accepeted after processing
    }

    zle -N accept-line my-accept-line # Add the function to the accept-line widget

fi

# La versiÃ³n de arriba mola mas, pero si no se quiere usar preexec, se puede usar esta
function ku(){
    eval $(python ~/kkgepo/kubealias.py $1) ${@:2} ;
    # echo $(python ~/kubealias.py $1);
}

# namespace get and set
function k_set_ns() { kubectl config set-context --current --namespace="$1";}
function k_get_ns() { kubectl config view --minify --output 'jsonpath={..namespace}' | tr -d "\n"; echo; } # if empty, it's in default namespace

# set namespace fzf
function ksetns() {
    local current_ns=$(k_get_ns)
    local new_ns=$(kubectl get ns --no-headers | fzf --header="current: $current_ns" | awk '{print $1}' )
    k_set_ns $new_ns
}

# set context fzf
function ksetco(){
    local current_context=$(kubectl config current-context)
    local context=$(kubectl config get-contexts --no-headers | fzf --header="current: $current_context" | awk '{print $1}')
    kubectl config use-context $context
}

# if code is available, use it as the editor, else use vim
if code -v >/dev/null 2>&1; then
    export KUBE_EDITOR="code --wait"
else
    export KUBE_EDITOR="vi"
fi